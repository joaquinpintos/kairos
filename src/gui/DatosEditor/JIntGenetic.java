/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.DatosEditor;

import data.CheckDataProyecto;
import data.DataKairos;
import data.MyConstants;
import genetic.crossovers.PermutationCrossover;
import data.genetic.DataGenerator;
import data.genetic.GeneticAlgorithm;
import data.genetic.GeneticInformer;
import genetic.crossovers.Crossover;
import data.genetic.ListaCasillas;
import data.genetic.ListaSegmentos;
import data.genetic.PosibleSolucion;
import data.horarios.HorarioConstructor;
import genetic.mutators.AssortedMutator;
import genetic.mutators.Mutator;
import gui.MainWindowTabbed;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;
import data.restricciones.Restriccion;
import gui.AbstractMainWindow;
import java.util.HashSet;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import sun.java2d.loops.CompositeType;

/**
 *
 * @author david
 */
public class JIntGenetic extends javax.swing.JInternalFrame implements DataGUIInterface {

    //private GeneticAlgorithm geneticAlgorithm;
    ListaCasillas listaCasillas;
    ListaSegmentos listaSegmentos;
    private AbstractMainWindow mainWindow;//Referencia a mw
    private final DataKairos dk;
    private SwingWorker<PosibleSolucion, GeneticInterim> geneticWorker;

    /**
     * Creates new form JIntGenetic
     *
     * @param dk
     * @throws Exception
     */
    public JIntGenetic(DataKairos dk) throws Exception {
        initComponents();
        this.dk = dk;
        jTextProbabilidadMutacion.setText(".005");
        jTextTamañoPoblacion.setText("500");
        jTextElitismo.setText("7");
        jLabSemaforo.setText("");
        jLabSemaforo.setIcon(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabIteracion = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextTamañoPoblacion = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextProbabilidadMutacion = new javax.swing.JTextField();
        jButComenzar = new javax.swing.JButton();
        jTogInterrumpido = new javax.swing.JToggleButton();
        jLabOptimoGlobal = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextElitismo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextRestriccionesNoCumplidas = new javax.swing.JTextArea();
        jLabSemaforo = new javax.swing.JLabel();

        jLabIteracion.setText("Iteración:");
        jLabIteracion.setFocusable(false);

        jLabel3.setText("Número de elementos de la población:");
        jLabel3.setFocusable(false);

        jTextTamañoPoblacion.setNextFocusableComponent(jTextElitismo);

        jLabel4.setText("Probabilidad de mutación:");
        jLabel4.setFocusable(false);

        jTextProbabilidadMutacion.setNextFocusableComponent(jButComenzar);

        jButComenzar.setText("Comenzar");
        jButComenzar.setNextFocusableComponent(jTogInterrumpido);
        jButComenzar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButComenzarActionPerformed(evt);
            }
        });

        jTogInterrumpido.setText("Cancelar");

        jLabOptimoGlobal.setText("Óptimo:");
        jLabOptimoGlobal.setFocusable(false);

        jLabel1.setText("Elitismo:");
        jLabel1.setFocusable(false);

        jTextElitismo.setNextFocusableComponent(jTextProbabilidadMutacion);

        jTextRestriccionesNoCumplidas.setColumns(20);
        jTextRestriccionesNoCumplidas.setRows(5);
        jTextRestriccionesNoCumplidas.setFocusable(false);
        jScrollPane1.setViewportView(jTextRestriccionesNoCumplidas);

        jLabSemaforo.setText("jlSem");
        jLabSemaforo.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(63, 63, 63))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextProbabilidadMutacion, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                                .addComponent(jTextTamañoPoblacion)))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextElitismo, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(75, 75, 75))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabIteracion)
                                        .addComponent(jLabOptimoGlobal))
                                    .addGap(128, 128, 128))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(107, 107, 107)
                                    .addComponent(jLabSemaforo)
                                    .addGap(43, 43, 43)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButComenzar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTogInterrumpido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextTamañoPoblacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextProbabilidadMutacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextElitismo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButComenzar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabIteracion)
                            .addComponent(jLabSemaforo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabOptimoGlobal))
                    .addComponent(jTogInterrumpido))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButComenzarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButComenzarActionPerformed
        try {
            doGenetic();
        } catch (Exception ex) {
            Logger.getLogger(JIntGenetic.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButComenzarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButComenzar;
    private javax.swing.JLabel jLabIteracion;
    private javax.swing.JLabel jLabOptimoGlobal;
    private javax.swing.JLabel jLabSemaforo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextElitismo;
    private javax.swing.JTextField jTextProbabilidadMutacion;
    private javax.swing.JTextArea jTextRestriccionesNoCumplidas;
    private javax.swing.JTextField jTextTamañoPoblacion;
    private javax.swing.JToggleButton jTogInterrumpido;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @throws Exception
     */
    public void doGenetic() throws Exception {
        doGenetic(null);
    }

    /**
     *
     * @param solInicial
     * @throws Exception
     */
    public void doGenetic(PosibleSolucion solInicial) throws Exception {
        final ImageIcon[] trafficLights = new ImageIcon[]{MyConstants.RED_TRAFFIC_LIGHT, MyConstants.YELLOW_TRAFFIC_LIGHT, MyConstants.GREEN_TRAFFIC_LIGHT};
        final GeneticAlgorithm geneticAlgorithm;
        CheckDataProyecto check = new CheckDataProyecto(dk.getDP());
        dk.getDP().calculaMinutosPorCasilla();
        System.out.println("Minutos por casilla: " + dk.getDP().getMinutosPorCasilla());
        DataGenerator dataGenerator = new DataGenerator(dk.getDP().getMinutosPorCasilla(), dk.getDP());
        dataGenerator.calculaHashMapDeAsignacionesAulasAGrupos();

        Mutator mutator = new AssortedMutator();
        Crossover crossover = new PermutationCrossover();

        HashSet<String> errores = new HashSet<String>();
        errores.addAll(check.chequeaProfesores());
        errores.addAll(check.chequeaSiLosGruposCaben());
        errores.addAll(check.chequeSiTodoGrupoTieneUnaAulaAsignada());
        errores.addAll(check.chequeaSiTodosLosTramosTienenAsignadaDocencia());
        String textoError = "Se han encontrado los siguientes errores validando los datos:\n";
        for (String er : errores) {
            textoError += "\n - " + er;
        }
        if (!errores.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, textoError, "Error al validar", JOptionPane.OK_OPTION);
            return;
        }

        if (!dataGenerator.generaDatos()) {
            jLabIteracion.setText("Error: no hay aulas suficientes!!");
            return;
        }
        int tamañoManada = Integer.valueOf(jTextTamañoPoblacion.getText());
        double probMutacion = Double.valueOf(jTextProbabilidadMutacion.getText());
        int elitismo = Integer.valueOf(jTextElitismo.getText());

        geneticAlgorithm = new GeneticAlgorithm(crossover, mutator, dk.getDP());
        geneticAlgorithm.setTamañoManada(tamañoManada);
        geneticAlgorithm.setNumElitismo(elitismo);
        geneticAlgorithm.setMainWindow(mainWindow);
        mutator.setFactorMutacion(probMutacion);
        GeneticInformer informer = new GeneticInformer() {
            int contador = 0;

            @Override
            public void setInformation(GeneticAlgorithm g) {
                jLabIteracion.setText("Iteración: " + g.getNumIter());
                jLabOptimoGlobal.setText("Óptimo global: " + g.getOptimo().getPeso());
//                jLabSemaforo.setIcon(trafficLights[g.getNivelCritico()-1]);
                jLabSemaforo.setIcon(null);
                jLabSemaforo.setText(g.getNivelCritico() + "");
                //jLabOptimoPoblacion.setText("Óptimo población: " + optimoManada);
                contador++;
                if (contador == 10) {
                    contador = 0;
                    g.calculaPesosOptimo();
                    jTextRestriccionesNoCumplidas.setText(g.getDescripcionRestriccionesFallidas());
                }
            }

            @Override
            public boolean interrumpido() {
                boolean resul = jTogInterrumpido.isSelected();
                if (resul) {
                    jTogInterrumpido.setSelected(false);
                }
                return resul;
            }

            @Override
            public void finalizado(GeneticAlgorithm g) {
                g.setDebug(true);
                g.calculaPesosOptimo();
                jTextRestriccionesNoCumplidas.setText("");

            }
        };
        for (Restriccion r : dk.getDP().getDataRestricciones().getListaRestricciones()) {
            r.setMarcaCasillasConflictivas(false);//Mientras optimizo, no necesito esto
            geneticAlgorithm.addRestriccion(r);
        }

//        geneticAlgorithm.setGeneticInformer(informer);
        geneticAlgorithm.inicializarDatos();
        geneticAlgorithm.setMax_iter(100000);
        geneticAlgorithm.setSolucionInicial(solInicial);

        geneticWorker = new SwingWorker<PosibleSolucion, GeneticInterim>() {
            int contador;

            @Override
            public PosibleSolucion doInBackground() throws Exception {
                contador = 0;
                while ((!jTogInterrumpido.isSelected())&&(geneticAlgorithm.runSingleLoop())) {
                    publish(new GeneticInterim(geneticAlgorithm.getNumIter(), geneticAlgorithm.getNivelCritico(), geneticAlgorithm.getOptimo().getPeso()));
                }
                return geneticAlgorithm.getSolucion();
            }

            @Override
            public void done() {
                PosibleSolucion optimo;
                try {
                    optimo = get();
                    dk.getDP().setOptimo(optimo);
                    dk.getDP().setHorario(HorarioConstructor.constructor(optimo, dk.getDP()));
                    mainWindow.getjIntHorarioView().updateData();
                } catch (InterruptedException ex) {
                    Logger.getLogger(JIntGenetic.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ExecutionException ex) {
                    Logger.getLogger(JIntGenetic.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(JIntGenetic.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            @Override
            protected void process(List<GeneticInterim> informs) {
                GeneticInterim i = informs.get(informs.size() - 1);
                jLabIteracion.setText("Iteración: " + i.numIter);
                jLabOptimoGlobal.setText("Óptimo global: " + i.peso);
//                jLabSemaforo.setIcon(trafficLights[g.getNivelCritico()-1]);
                jLabSemaforo.setIcon(null);
                jLabSemaforo.setText(i.level + "");
                //jLabOptimoPoblacion.setText("Óptimo población: " + optimoManada);
                contador++;
                if (contador == 10) {
                    contador = 0;
                    geneticAlgorithm.calculaPesosOptimo();
                    jTextRestriccionesNoCumplidas.setText(geneticAlgorithm.getDescripcionRestriccionesFallidas());
                }
            }

        };
//        GeneticWorker worker=new GeneticWorker(geneticAlgorithm);
//        PosibleSolucion optimo = worker.doInBackground();

        geneticWorker.execute();
//        worker.run();
//      geneticAlgorithm.runMainLoop();
//        PosibleSolucion optimo = dk.getDP().getOptimo();

    }

    /**
     *
     */
    @Override
    public void updateData() {
    }

    /**
     *
     * @param mainWindow
     */
    @Override
    public void setMainWindow(AbstractMainWindow mainWindow) {
        this.mainWindow = mainWindow;
    }
}

class GeneticWorker extends SwingWorker<PosibleSolucion, Integer> {

    GeneticAlgorithm geneticAlgorithm;

    public GeneticWorker(GeneticAlgorithm geneticAlgorithm) {
        this.geneticAlgorithm = geneticAlgorithm;
    }

    @Override
    public PosibleSolucion doInBackground() {
        geneticAlgorithm.runSingleLoop();
        PosibleSolucion s = geneticAlgorithm.getOptimo();
        return s;
    }
};

class GeneticInterim {

    public int numIter;
    public int level;
    public double peso;

    public GeneticInterim(int numIter, int level, double peso) {
        this.numIter = numIter;
        this.level = level;
        this.peso = peso;
    }

}
