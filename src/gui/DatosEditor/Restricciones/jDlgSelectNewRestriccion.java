/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.DatosEditor.Restricciones;

import data.DataKairos;
import data.DataProject;
import data.restricciones.Restriccion;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.ListModel;
import javax.swing.event.ListDataListener;


/**
 *
 * @author David Gutiérrez Rubio <davidgutierrezrubio@gmail.com>
 */
public class jDlgSelectNewRestriccion extends javax.swing.JDialog {

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;
    private final AbstractAction editarAction;
    private final DataKairos dk;

    /**
     * Creates new form jDlgSelectNewRestriccion
     * @param parent 
     * @param modal
     * @param dk
     * @param editarAction  
     */
    public jDlgSelectNewRestriccion(java.awt.Frame parent, boolean modal, DataKairos dk, AbstractAction editarAction) {
        super(parent, modal);
        this.dk=dk;
        initComponents();
        this.editarAction = editarAction;

        // Close the dialog when Esc is pressed
        String cancelName = "Cancelar";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });

        jListRestriccionesDisponibles.setModel(new JListNuevasRestricciones(dk));
        RestriccionListRenderer restriccionListRenderer = new RestriccionListRenderer();
        restriccionListRenderer.setDescripcionesCortas(true);
        jListRestriccionesDisponibles.setCellRenderer(restriccionListRenderer);
        if (jListRestriccionesDisponibles.getModel().getSize() > 0) {
            jListRestriccionesDisponibles.setSelectedIndex(0);
        }
        
        jListRestriccionesDisponibles.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode()==KeyEvent.VK_ENTER)
                {
                    doClose(RET_OK);
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
            }
        });
        jListRestriccionesDisponibles.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
                 if (e.getClickCount() == 2) {//Al hace doble click se edita la restricción.
                     doClose(RET_OK);
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
    }

    
    
    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jListRestriccionesDisponibles = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(500, 400));
        jScrollPane1.setRequestFocusEnabled(false);

        jListRestriccionesDisponibles.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jListRestriccionesDisponibles);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 10, 10));

        cancelButton.setText("Cancelar");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel1.add(cancelButton);

        okButton.setText("Aceptar");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        jPanel1.add(okButton);
        getRootPane().setDefaultButton(okButton);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);
        getContentPane().add(filler1, java.awt.BorderLayout.LINE_END);
        getContentPane().add(filler2, java.awt.BorderLayout.LINE_START);
        getContentPane().add(filler3, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void doClose(int retStatus) {
        Restriccion rNueva = null;
        if (retStatus == RET_OK) {
            Restriccion r = (Restriccion) jListRestriccionesDisponibles.getSelectedValue();
            if (r != null) //Si hay alguna restriccion seleccionada...
            {
                try {
                    rNueva = r.getClass().newInstance();
                    rNueva.setDataProyecto(dk.getDP());
                    setVisible(false);
                    boolean aceptado = rNueva.lanzarDialogoDeConfiguracion(rNueva);
                    if (aceptado) {
                        dk.getDP().getRestrictionsData().add(rNueva);
                    }
                } catch (InstantiationException ex) {
                    Logger.getLogger(jDlgSelectNewRestriccion.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(jDlgSelectNewRestriccion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }

        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JList jListRestriccionesDisponibles;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;
}
class JListNuevasRestricciones implements ListModel<Restriccion> {
    private final DataKairos dk;


    public JListNuevasRestricciones(DataKairos dk) {
        this.dk=dk;
    }

    @Override
    public int getSize() {
        return dk.getRestriccionesDisponibles().size();
    }

    @Override
    public Restriccion getElementAt(int index) {
        return dk.getRestriccionesDisponibles().get(index);
    }

    @Override
    public void addListDataListener(ListDataListener l) {
        //No creo que haga falta implementar listeners aquí.
    }

    @Override
    public void removeListDataListener(ListDataListener l) {
    }
}