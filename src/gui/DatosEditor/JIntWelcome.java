/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.DatosEditor;

import data.DataKairos;
import data.DataProyecto;
import data.MyConstants;
import data.restricciones.Restriccion;
import gui.AbstractMainWindow;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import loader.XMLDataLoaderWriter;

/**
 *
 * @author david
 */
public final class JIntWelcome extends javax.swing.JInternalFrame implements DataGUIInterface {

    private AbstractMainWindow mainWindow;
    private final DataKairos dk;
    private File lastFileUsed;
    private AbstractAction cargarProyectoAction;
    private AbstractAction guardarProyectoAction;
    private AbstractAction guardarProyectoComoAction;

    /**
     * Creates new form JIntWelcome
     * @param dk 
     */
    public JIntWelcome(DataKairos dk) {
        initComponents();
        this.dk = dk;
        jLabel1.setIcon(MyConstants.LOGOGRANDE);
        jLabel2.setIcon(MyConstants.RELIEVE_KAIROS);
        creaAcciones();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButNuevoProyecto = new javax.swing.JButton();
        jButCargarProyecto = new javax.swing.JButton();
        jButGuardarProyecto = new javax.swing.JButton();
        jButExportarXML = new javax.swing.JButton();
        jButImportarXML = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 7), new java.awt.Dimension(0, 7), new java.awt.Dimension(32767, 7));

        jButNuevoProyecto.setText("Nuevo Proyecto");
        jButNuevoProyecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButNuevoProyectoActionPerformed(evt);
            }
        });
        jPanel1.add(jButNuevoProyecto);

        jButCargarProyecto.setText("Cargar Proyecto");
        jPanel1.add(jButCargarProyecto);

        jButGuardarProyecto.setText("Guardar Proyecto");
        jPanel1.add(jButGuardarProyecto);

        jButExportarXML.setText("Exportar datos XML");
        jButExportarXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButExportarXMLActionPerformed(evt);
            }
        });
        jPanel1.add(jButExportarXML);

        jButImportarXML.setText("Importar datos XML");
        jButImportarXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButImportarXMLActionPerformed(evt);
            }
        });
        jPanel1.add(jButImportarXML);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        jLabel1.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(" 1.0beta");
        jPanel3.add(jLabel1);

        jPanel2.add(jPanel3);

        jPanel4.add(jLabel2);

        jPanel2.add(jPanel4);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);
        getContentPane().add(filler3, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButImportarXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButImportarXMLActionPerformed
//Este metodo IMPORTA datos de XML
        if ((!dk.getDP().isDirty()) || (JOptionPane.showConfirmDialog(rootPane, "Hay datos sin guardar, ¿continuar?", "Datos sin guardar", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)) {
            JFileChooser fc = new JFileChooser("archivos");
            fc.setDialogTitle("Elige archivo de proyecto a cargar");
            FileNameExtensionFilter filt = new FileNameExtensionFilter("Archivo XML", "xml");
            fc.setFileFilter(filt);
            int valorDevuelto = fc.showOpenDialog(this);

            if (valorDevuelto == JFileChooser.APPROVE_OPTION) {
                dk.clear();
                boolean cargaCorrecta = loadFromFile(fc.getSelectedFile());
                if (!cargaCorrecta) {
                    JOptionPane.showMessageDialog(this, "Error al cargar los datos.");
                }
                mainWindow.refreshAllTabs();
                mainWindow.expandAllTrees();
                dk.getDP().setDirty(false);
            }
        }

    }//GEN-LAST:event_jButImportarXMLActionPerformed

    private void jButExportarXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButExportarXMLActionPerformed
        //Este metodo EXPORTA los datos a XML
        JFileChooser fc = new JFileChooser(mainWindow.getLastFileUsed());
        fc.setDialogTitle("Elige archivo a guardar");
        int valorDevuelto = fc.showSaveDialog(this);

        if (valorDevuelto == JFileChooser.APPROVE_OPTION) {
            boolean guardadoCorrecto = true;
            try {
                guardadoCorrecto = saveToFile(fc.getSelectedFile());
            } catch (IOException ex) {
                Logger.getLogger(JIntWelcome.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (!guardadoCorrecto) {
                JOptionPane.showMessageDialog(this, "Error al guardar los datos.");
            }
        }
    }//GEN-LAST:event_jButExportarXMLActionPerformed

    private void jButNuevoProyectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButNuevoProyectoActionPerformed
//Crea un nuevo proyecto
        if ((!dk.getDP().isDirty()) || (JOptionPane.showConfirmDialog(rootPane, "Hay datos sin guardar, ¿continuar?", "Datos sin guardar", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)) {

            String nombreProyecto = (String) JOptionPane.showInputDialog(rootPane, null, "Nombre del proyecto", JOptionPane.QUESTION_MESSAGE);
            if (nombreProyecto != null) {
                dk.createNewDP(nombreProyecto);
            }
        }
    }//GEN-LAST:event_jButNuevoProyectoActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler3;
    private javax.swing.JButton jButCargarProyecto;
    private javax.swing.JButton jButExportarXML;
    private javax.swing.JButton jButGuardarProyecto;
    private javax.swing.JButton jButImportarXML;
    private javax.swing.JButton jButNuevoProyecto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables

    /**
     *
     */
    @Override
    public void updateData() {
    }

    /**
     *
     * @param mainWindow
     */
    @Override
    public void setMainWindow(AbstractMainWindow mainWindow) {
        this.mainWindow = mainWindow;
    }

    /**
     *
     * @param fichero
     * @return
     */
    public boolean loadFromFile(File fichero) {
        XMLDataLoaderWriter xmldlw = new XMLDataLoaderWriter(dk.getDP());
        xmldlw.setFile(fichero);
        boolean resul = xmldlw.load(fichero);
        //Reconstruyo hashmap de profesores, util para asignaciones
        if (resul) {
            dk.getDP().reconstruyeHashMapProfesor();
        }
        return resul;
    }

    /**
     *
     * @param fichero
     * @return
     * @throws IOException
     */
    public boolean saveToFile(File fichero) throws IOException {
        XMLDataLoaderWriter xmldlw = new XMLDataLoaderWriter(dk.getDP());
        xmldlw.setFile(fichero);
        return xmldlw.save();
    }

   

    /**
     *
     */
    public void creaAcciones() {
        class CargarProyectoAction extends AbstractAction {

            public CargarProyectoAction() {
                super("Cargar proyecto", null);
            }

            @Override
            public void actionPerformed(ActionEvent e) {
                if ((!dk.getDP().isDirty()) || (JOptionPane.showConfirmDialog(rootPane, "Hay datos sin guardar, ¿continuar?", "Datos sin guardar", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)) {
                    FileInputStream fich;
                    ObjectInputStream os = null;
                    try {
                        JFileChooser fc = new JFileChooser(mainWindow.getLastFileUsed());
                        FileNameExtensionFilter filt = new FileNameExtensionFilter("Archivos kairos", "krs");
                        fc.setFileFilter(filt);
                        fc.setDialogTitle("Elige archivo a cargar");
                        int valorDevuelto = fc.showSaveDialog(null);

                        if (valorDevuelto == JFileChooser.APPROVE_OPTION) {
//                            setLastFileUsed(fc.getSelectedFile());
                            fich = new FileInputStream(lastFileUsed);
                            os = new ObjectInputStream(fich);
                            DataProyecto o = (DataProyecto) os.readObject();
                             os.close();
                            dk.setDP(o);
                            mainWindow.registraListeners();
                            mainWindow.getjIntTreeProfesores().updateData();
                            mainWindow.getjIntTreeAsignaturas().updateData();
                            mainWindow.getjIntTreeAulas().updateData();
                            mainWindow.getjIntHorarioView().getHorariosJPanelModel().setMainWindow(mainWindow);


                            for (Restriccion r : dk.getDP().getDataRestricciones().getListaRestricciones()) {
                                r.setDataProyecto(dk.getDP());
                            }
                            mainWindow.getjIntHorarioView().needRecalcularPesos();
                            mainWindow.expandAllTrees();

                            for (Restriccion r : dk.getDP().getDataRestricciones().getListaRestricciones()) {
                                r.setDataProyecto(dk.getDP());
                            }
                        }
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(JIntWelcome.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(JIntWelcome.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(JIntWelcome.class.getName()).log(Level.SEVERE, null, ex);
                    } finally {
                        try {
                            os.close();
                        } catch (IOException ex) {
                            Logger.getLogger(JIntWelcome.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        }

        class GuardarProyectoAction extends AbstractAction {

            public GuardarProyectoAction() {
                super("Guardar proyecto", null);
            }

            @Override
            public void actionPerformed(ActionEvent e) {
                FileOutputStream fisal;
                mainWindow.borraListeners();
                ObjectOutputStream oos = null;
                try {
                    if (lastFileUsed == null) {
                        guardarProyectoComoAction.actionPerformed(e);
                    } else {
                        fisal = new FileOutputStream(lastFileUsed);
                        oos = new ObjectOutputStream(fisal);
                        oos.writeObject(dk.getDP());
                        oos.close();

                    }
                } catch (FileNotFoundException ex) {
                    JOptionPane.showMessageDialog(rootPane, "No puedo cargar este fichero", "Error", JOptionPane.ERROR_MESSAGE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(rootPane, "No puedo cargar este fichero", "Error", JOptionPane.ERROR_MESSAGE);
                } finally {
                }
            }
        }
        class GuardarProyectoComoAction extends AbstractAction {

            public GuardarProyectoComoAction() {
                super("Guardar proyecto como...", null);
            }

            @Override
            public void actionPerformed(ActionEvent e) {
                FileOutputStream fisal;
                mainWindow.borraListeners();
                ObjectOutputStream oos = null;
                try {
                    JFileChooser fc = new JFileChooser(mainWindow.getLastFileUsed());
                    fc.setDialogTitle("Guardar como...");
                    FileNameExtensionFilter filt = new FileNameExtensionFilter("Archivos kairos", "krs");
                    fc.setFileFilter(filt);
                    int valorDevuelto = fc.showSaveDialog(null);

                    if (valorDevuelto == JFileChooser.APPROVE_OPTION) {
                        if ((!fc.getSelectedFile().exists()) || (JOptionPane.showConfirmDialog(rootPane, "El fichero existe, ¿sobreescribir?", "Atención", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)) {
//                            setLastFileUsed(fc.getSelectedFile());
                            fisal = new FileOutputStream(lastFileUsed);
                            oos = new ObjectOutputStream(fisal);
                            oos.writeObject(dk.getDP());
                            oos.close();
                        }
                    }
                } catch (FileNotFoundException ex) {
                    JOptionPane.showMessageDialog(rootPane, "Ha ocurrido un error al guardar este fichero.", "Error", JOptionPane.ERROR_MESSAGE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(rootPane, "Error al guardar. Probablemente no tenga permisos para escribir en el archivo.", "Error", JOptionPane.ERROR_MESSAGE);
                } finally {
                }
            }
        }
        cargarProyectoAction = new CargarProyectoAction();
        guardarProyectoAction = new GuardarProyectoAction();
        guardarProyectoComoAction = new GuardarProyectoComoAction();
        jButCargarProyecto.setAction(cargarProyectoAction);

        jButGuardarProyecto.setAction(guardarProyectoAction);
    }

    /**
     *
     * @return
     */
    public AbstractAction getGuardarProyectoAction() {
        return guardarProyectoAction;
    }

    /**
     *
     * @return
     */
    public AbstractAction getCargarProyectoAction() {
        return cargarProyectoAction;
    }

    /**
     *
     * @return
     */
    public AbstractAction getGuardarProyectoComoAction() {
        return guardarProyectoComoAction;
    }
}
