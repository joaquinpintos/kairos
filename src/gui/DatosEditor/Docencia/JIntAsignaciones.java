/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.DatosEditor.Docencia;

import data.DataKairos;
import data.DataProyectoListener;
import data.MyConstants;
import data.asignaturas.Asignatura;
import data.asignaturas.Carrera;
import data.asignaturas.Curso;
import data.asignaturas.DataAsignaturas;
import data.asignaturas.DocenciaItem;
import data.asignaturas.Grupo;
import data.aulas.DataAulas;
import data.profesores.DataProfesores;
import data.profesores.Departamento;
import data.profesores.Profesor;
import gui.DatosEditor.DataGUIInterface;
import gui.MainWindowTabbed;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.AbstractAction;
import javax.swing.AbstractListModel;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPopupMenu;
import javax.swing.ListCellRenderer;

//**********************************************************
//* Listmodel para todos los jlist que hay en esta ventana.*
//**********************************************************
/**
 *
 * @author david
 */
public final class JIntAsignaciones extends javax.swing.JInternalFrame implements DataGUIInterface {

    private DataAsignaturas dataAsignaturas;
    private DataAulas dataAulas;
    private DataProfesores dataProfesores;
    private DefaultListModel departamentosListModel;
    private DefaultListModel profesoresListModel;
    private DefaultListModel carrerasListModel;
    private DefaultListModel cursosListModel;
    private DefaultListModel asignaturasListModel;
    private DefaultListModel gruposListModel;
    private DefaultListModel docenciaListModel;
    private Departamento currentDepartamento;
    private Carrera currentCarrera;
    private Curso currentCurso;
    private Asignatura currentAsignatura;
    private Profesor currentProfesor;
    private Grupo currentGrupo;
    private MainWindowTabbed mainWindow;
    private AbstractAction asignaDocenciaAction;
    private AbstractAction quitaDocenciaAction;
    private AbstractAction buscaProfesorAction;
    private final DataKairos dk;
    private JPopupMenu jPopUpMenuGrupos;

    /**
     * Creates new form JIntAsignaciones
     * @param dk 
     */
    public JIntAsignaciones(DataKairos dk) {
        initComponents();
        this.dk = dk;
        jLabelNombreProfesor.setText("");
        //updateData();
        //populateData();


        creoModelosYRenderersDeListas();

        creaAccionesBasicas();
        creaMouseListeners();




    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListDepartamentos = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListProfesores = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListEstudios = new javax.swing.JList();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListCursos = new javax.swing.JList();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListAsignaturas = new javax.swing.JList();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jListGrupos = new javax.swing.JList();
        jButAsignar = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jListAsignaciones = new javax.swing.JList();
        jLabel9 = new javax.swing.JLabel();
        jLabTotalHoras = new javax.swing.JLabel();
        jButBorrarAsignacion = new javax.swing.JButton();
        jLabelNombreProfesor = new javax.swing.JLabel();

        setResizable(true);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jLabel1.setText("Profesorado");

        jLabel2.setText("Docencia");

        jListDepartamentos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListDepartamentosValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListDepartamentos);

        jLabel3.setText("Departamento:");

        jListProfesores.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListProfesoresValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListProfesores);

        jLabel4.setText("Nombre:");

        jLabel5.setText("Estudios:");

        jListEstudios.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListEstudiosValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jListEstudios);

        jLabel6.setText("Curso:");

        jListCursos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListCursosValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(jListCursos);

        jLabel7.setText("Asignatura:");

        jListAsignaturas.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListAsignaturasValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(jListAsignaturas);

        jLabel8.setText("Grupos no asignados:");

        jScrollPane6.setViewportView(jListGrupos);

        jButAsignar.setText("Asignar");

        jScrollPane7.setViewportView(jListAsignaciones);

        jLabel9.setText("Profesor:");

        jLabTotalHoras.setText("Total de horas:");

        jButBorrarAsignacion.setText("Eliminar asignaci√≥n");

        jLabelNombreProfesor.setText("jLabel11");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)))
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(128, 128, 128))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel5)
                        .addComponent(jScrollPane3)
                        .addComponent(jLabel6)
                        .addComponent(jScrollPane4)
                        .addComponent(jLabel7)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel8)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabTotalHoras)
                            .addComponent(jLabelNombreProfesor)
                            .addComponent(jLabel9))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButAsignar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                        .addComponent(jButBorrarAsignacion)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelNombreProfesor)))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabTotalHoras)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButAsignar)
                                    .addComponent(jButBorrarAsignacion))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
    }//GEN-LAST:event_formFocusGained

    private void jListDepartamentosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListDepartamentosValueChanged
        jListProfesores.updateUI();
    }//GEN-LAST:event_jListDepartamentosValueChanged

    private void jListEstudiosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListEstudiosValueChanged
        jListCursos.updateUI();
        jListAsignaturas.updateUI();
        jListGrupos.updateUI();
    }//GEN-LAST:event_jListEstudiosValueChanged

    private void jListCursosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListCursosValueChanged
        jListAsignaturas.updateUI();
        jListGrupos.updateUI();
    }//GEN-LAST:event_jListCursosValueChanged

    private void jListAsignaturasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListAsignaturasValueChanged
        jListGrupos.updateUI();
    }//GEN-LAST:event_jListAsignaturasValueChanged

    private void jListProfesoresValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListProfesoresValueChanged
        jListAsignaciones.updateUI();
        jLabelNombreProfesor.setText(jListProfesores.getSelectedValue().toString());
        jLabTotalHoras.setText(((Profesor) jListProfesores.getSelectedValue()).getHorasDocencia() + " horas de docencia asignadas.");
    }//GEN-LAST:event_jListProfesoresValueChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButAsignar;
    private javax.swing.JButton jButBorrarAsignacion;
    private javax.swing.JLabel jLabTotalHoras;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelNombreProfesor;
    private javax.swing.JList jListAsignaciones;
    private javax.swing.JList jListAsignaturas;
    private javax.swing.JList jListCursos;
    private javax.swing.JList jListDepartamentos;
    private javax.swing.JList jListEstudios;
    private javax.swing.JList jListGrupos;
    private javax.swing.JList jListProfesores;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    // End of variables declaration//GEN-END:variables

    /**
     *
     */
    @Override
    public void updateData() {
        updateSingleJlist(jListDepartamentos);
        updateSingleJlist(jListProfesores);
        //Selecciono los primeros elementos en caso de que no haya seleccionado

        updateSingleJlist(jListEstudios);
        updateSingleJlist(jListCursos);
        updateSingleJlist(jListAsignaturas);
        updateSingleJlist(jListGrupos);
        updateSingleJlist(jListAsignaciones);
    }

    private void updateSingleJlist(JList jlist) {
        jlist.updateUI();
        if (jlist.getSelectedIndex() == -1 & jlist.getModel().getSize() > 0) {
            jlist.setSelectedIndex(0);
        }
    }

    /**
     *
     * @param mainWindow
     */
    @Override
    public void setMainWindow(MainWindowTabbed mainWindow) {
        this.mainWindow = mainWindow;
    }

    /**
     *
     * @param selectedProfesor
     */
    public void seleccionaProfesor(Profesor selectedProfesor) {
        if (selectedProfesor != null) {
            jListDepartamentos.setSelectedValue(selectedProfesor.getDepartamento(), true);
            jListProfesores.setSelectedValue(selectedProfesor, true);
            updateData();
        }

    }

    private void creaAccionesBasicas() {
        class AsignaDocenciaAction extends AbstractAction {

            public AsignaDocenciaAction() {
                super("Asigna docencia", MyConstants.ADD_ICON);
            }

            @Override
            public void actionPerformed(ActionEvent e) {
                Profesor p = (Profesor) jListProfesores.getSelectedValue();
                Grupo g = (Grupo) jListGrupos.getSelectedValue();
                if ((p != null) && (g != null) && (!g.isAsignado())) {
                    p.addDocencia(g);
                    dk.getDP().getDataProfesores().fireDataEvent(p, DataProyectoListener.MODIFY);
                    updateData();
                }
            }
        }
        asignaDocenciaAction = new AsignaDocenciaAction();

        class QuitaDocenciaAction extends AbstractAction {

            public QuitaDocenciaAction() {
                super("Quitar docencia", MyConstants.REMOVE_ICON);
            }

            @Override
            public void actionPerformed(ActionEvent e) {
                DocenciaItem docenciaItem = (DocenciaItem) jListAsignaciones.getSelectedValue();
                if (docenciaItem != null) {

                    ((Profesor) jListProfesores.getSelectedValue()).removeDocencia(docenciaItem);
                    dk.getDP().getDataProfesores().fireDataEvent((Profesor) jListProfesores.getSelectedValue(), DataProyectoListener.MODIFY);

                    updateData();
                }
            }
        }
        class BuscaProfesorAction extends AbstractAction {

            public BuscaProfesorAction() {
                super("¬øQui√©n lo imparte?", MyConstants.PROFESOR_ICON);
            }
            

            @Override
            public void actionPerformed(ActionEvent e) {
                Grupo gr = (Grupo) jListGrupos.getSelectedValue();
                if (gr != null) {
                    Profesor p = dk.getDP().getDataProfesores().buscaProfesorQueImparte(gr);
                    seleccionaProfesor(p);
                    seleccionaDocencia(gr);
                }
            }

            private void seleccionaDocencia(Grupo gr) {
                //TODO: Implementar
            }
        }

        quitaDocenciaAction = new QuitaDocenciaAction();

        jButAsignar.setAction(asignaDocenciaAction);
        jButBorrarAsignacion.setAction(quitaDocenciaAction);
        buscaProfesorAction = new BuscaProfesorAction();
        jPopUpMenuGrupos=new JPopupMenu();
        jPopUpMenuGrupos.add(buscaProfesorAction);
        
    }

    private void creaMouseListeners()
    {
            //Aqu√≠ a√±ado mouselistener para registrar clicks y double-clicks
        MouseListener ml = new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    doPop(e);
                }
                Grupo g = (Grupo) jListGrupos.getSelectedValue();
                buscaProfesorAction.setEnabled(g!=null && g.isAsignado());
                if (e.getClickCount() == 2) {
                    asignaDocenciaAction.actionPerformed(null);
                }

            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    doPop(e);
                }
            }

            public void doPop(MouseEvent e) {
                jPopUpMenuGrupos.show(e.getComponent(), e.getX(), e.getY());
            }
        };
        jListGrupos.addMouseListener(ml);
        
          ml = new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                DocenciaItem d=(DocenciaItem) jListAsignaciones.getSelectedValue();
                quitaDocenciaAction.setEnabled(d!=null);
                if (e.getClickCount() == 2) {
                    quitaDocenciaAction.actionPerformed(null);
                }

            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            public void doPop(MouseEvent e) {
            }
        };
          jListAsignaciones.addMouseListener(ml);
    }
    
    private void creoModelosYRenderersDeListas() {
        //Modelos
        jListEstudios.setModel(new CarrerasListModel(dk));
        jListCursos.setModel(new CursosListModel(jListEstudios));
        jListAsignaturas.setModel(new AsignaturasListModel(jListCursos));
        jListDepartamentos.setModel(new DepartamentosListModel(dk));
        jListProfesores.setModel(new ProfesoresListModel(jListDepartamentos));
        jListGrupos.setModel(new GruposListModel(jListAsignaturas));
        jListAsignaciones.setModel(new AsignacionesListModel(jListProfesores));

        //Renderers
        jListGrupos.setCellRenderer(new gruposListRenderer());
        jListAsignaturas.setCellRenderer(new AsignaturasListRenderer());
        jListCursos.setCellRenderer(new CursosListRenderer());
        jListEstudios.setCellRenderer(new EstudiosListRenderer());
    }
}//End of class jintasignaciones

class DepartamentosListModel extends AbstractListModel<Departamento> {

    private final DataKairos dk;

    public DepartamentosListModel(DataKairos dk) {
        this.dk = dk;
    }

    @Override
    public int getSize() {
        return dk.getDP().getDataProfesores().getDepartamentos().size();
    }

    @Override
    public Departamento getElementAt(int index) {
        return dk.getDP().getDataProfesores().getDepartamentos().get(index);
    }
}

class ProfesoresListModel extends AbstractListModel<Profesor> {

    private final JList<Departamento> jListParent;

    public ProfesoresListModel(JList<Departamento> jlistParent) {
        this.jListParent = jlistParent;
    }

    @Override
    public int getSize() {
        try {
            return jListParent.getSelectedValue().getProfesores().size();
        } catch (NullPointerException ex) {
            return 0;
        }
    }

    @Override
    public Profesor getElementAt(int index) {
        return jListParent.getSelectedValue().getProfesores().get(index);
    }
}

class CarrerasListModel extends AbstractListModel<Carrera> {

    private final DataKairos dk;

    public CarrerasListModel(DataKairos dk) {
        this.dk = dk;
    }

    @Override
    public int getSize() {
        return dk.getDP().getDataAsignaturas().getCarreras().size();
    }

    @Override
    public Carrera getElementAt(int index) {
        return dk.getDP().getDataAsignaturas().getCarreras().get(index);
    }
}

class CursosListModel extends AbstractListModel<Curso> {

    private final JList<Carrera> jListParent;

    public CursosListModel(JList<Carrera> jlistParent) {
        this.jListParent = jlistParent;
    }

    @Override
    public int getSize() {
        try {
            return jListParent.getSelectedValue().getCursos().size();
        } catch (NullPointerException ex) {
            return 0;
        }
    }

    @Override
    public Curso getElementAt(int index) {
        return jListParent.getSelectedValue().getCursos().get(index);
    }
}

class AsignaturasListModel extends AbstractListModel<Asignatura> {

    private final JList<Curso> jListParent;

    public AsignaturasListModel(JList<Curso> jListParent) {
        this.jListParent = jListParent;
    }

    @Override
    public int getSize() {
        try {
            return jListParent.getSelectedValue().getAsignaturas().size();
        } catch (NullPointerException ex) {
            return 0;
        }
    }

    @Override
    public Asignatura getElementAt(int index) {
        Asignatura resul = null;
        try {
            resul = jListParent.getSelectedValue().getAsignaturas().get(index);
        } catch (Exception ex) {
        }
        return resul;
    }
}

class GruposListModel extends AbstractListModel<Grupo> {

    private final JList<Asignatura> jListParent;

    public GruposListModel(JList<Asignatura> jListParent) {
        this.jListParent = jListParent;
    }

    @Override
    public int getSize() {
        try {
            return jListParent.getSelectedValue().getGrupos().getGrupos().size();
        } catch (NullPointerException ex) {
            return 0;
        }
    }

    @Override
    public Grupo getElementAt(int index) {
        return jListParent.getSelectedValue().getGrupos().getGrupos().get(index);
    }
}

//RENDERERS
class AsignacionesListModel extends AbstractListModel<DocenciaItem> {

    private final JList<Profesor> jListParent;

    public AsignacionesListModel(JList<Profesor> jListParent) {
        this.jListParent = jListParent;
    }

    @Override
    public int getSize() {
        try {
            return jListParent.getSelectedValue().getDocencia().size();
        } catch (NullPointerException ex) {
            return 0;
        }
    }

    @Override
    public DocenciaItem getElementAt(int index) {
        return jListParent.getSelectedValue().getDocencia().get(index);
    }
}

//RENDERERS
class gruposListRenderer extends JLabel implements ListCellRenderer<Grupo> {

    public gruposListRenderer() {
        this.setOpaque(true);
    }

    @Override
    public Component getListCellRendererComponent(JList<? extends Grupo> list, Grupo value, int index, boolean isSelected, boolean cellHasFocus) {
        if (isSelected) {
            this.setBackground(MyConstants.SELECTED_ITEM_LIST);
        } else {
            this.setBackground(MyConstants.UNSELECTED_ITEM_LIST);
        }
        if (value.isAsignado()) {
            this.setIcon(MyConstants.GRUPO_ICON);
            this.setForeground(MyConstants.CON_DOCENCIA_ASIGNADA);

        } else {
            this.setIcon(MyConstants.GRUPO_ICON);
            this.setForeground(MyConstants.SIN_DOCENCIA_ASIGNADA);
        }
        this.setText(value.toString());
        return this;
    }
}

class AsignaturasListRenderer extends JLabel implements ListCellRenderer<Asignatura> {

    public AsignaturasListRenderer() {
        this.setOpaque(true);
    }

    @Override
    public Component getListCellRendererComponent(JList<? extends Asignatura> list, Asignatura value, int index, boolean isSelected, boolean cellHasFocus) {
        if (isSelected) {
            this.setBackground(MyConstants.SELECTED_ITEM_LIST);
        } else {
            this.setBackground(MyConstants.UNSELECTED_ITEM_LIST);
        }
        if (!value.tieneGruposSinAsignar()) {
            this.setIcon(MyConstants.ASIGNATURA_ICON);
            this.setForeground(MyConstants.CON_DOCENCIA_ASIGNADA);
        } else {
            this.setIcon(MyConstants.ASIGNATURA_ICON);
            this.setForeground(MyConstants.SIN_DOCENCIA_ASIGNADA);
        }
        this.setText(value.toString());
        return this;
    }
}

class CursosListRenderer extends JLabel implements ListCellRenderer<Curso> {

    public CursosListRenderer() {
        this.setOpaque(true);
    }

    @Override
    public Component getListCellRendererComponent(JList<? extends Curso> list, Curso value, int index, boolean isSelected, boolean cellHasFocus) {
        if (isSelected) {
            this.setBackground(MyConstants.SELECTED_ITEM_LIST);
        } else {
            this.setBackground(MyConstants.UNSELECTED_ITEM_LIST);
        }
        if (!value.tieneGruposSinAsignar()) {
            this.setIcon(MyConstants.CURSO_ICON);
            this.setForeground(MyConstants.CON_DOCENCIA_ASIGNADA);
        } else {
            this.setIcon(MyConstants.CURSO_ICON);
            this.setForeground(MyConstants.SIN_DOCENCIA_ASIGNADA);
        }
        this.setText(value.toString());
        return this;
    }
}

class EstudiosListRenderer extends JLabel implements ListCellRenderer<Carrera> {

    public EstudiosListRenderer() {
        this.setOpaque(true);
    }

    @Override
    public Component getListCellRendererComponent(JList<? extends Carrera> list, Carrera value, int index, boolean isSelected, boolean cellHasFocus) {
        if (isSelected) {
            this.setBackground(MyConstants.SELECTED_ITEM_LIST);
        } else {
            this.setBackground(MyConstants.UNSELECTED_ITEM_LIST);
        }
        if (!value.tieneGruposSinAsignar()) {
            this.setIcon(MyConstants.CARRERA_ICON);
            this.setForeground(MyConstants.CON_DOCENCIA_ASIGNADA);
        } else {
            this.setIcon(MyConstants.CARRERA_ICON);
            this.setForeground(MyConstants.SIN_DOCENCIA_ASIGNADA);
        }
        this.setText(value.toString());
        return this;
    }
}