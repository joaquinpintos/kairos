/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import data.DataKairos;
import gui.DatosEditor.Restricciones.JIntRestricciones;
import gui.DatosEditor.DataGUIInterface;
import gui.DatosEditor.JIntGenetic;
import gui.DatosEditor.JIntDatosProyecto;
import gui.DatosEditor.JIntTreeProfesores;
import gui.DatosEditor.JIntWelcome;
import gui.DatosEditor.Aulas.JIntTreeAulas;
import gui.DatosEditor.Asignaturas.JIntTreeAsignaturas;
import data.asignaturas.DataAsignaturas;
import data.aulas.DataAulas;
import data.profesores.DataProfesores;
import gui.DatosEditor.Docencia.JIntAsignaciones;
import gui.HorarioEditor.JIntHorarioPorAulas;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JTree;
import testers.AsigTester;

/**
 *
 * @author david
 */
public class MainWindowDesktopPane extends javax.swing.JFrame {

    //Variables globales de aplicación
    boolean dirty;
    private DataProfesores dataProfesores;
    private DataAsignaturas dataAsignaturas;
    private DataAulas dataAulas;
    private DataKairos dk;
    private JIntWelcome jIntWelcome;
    private JIntTreeProfesores jIntTreeProfesores;
    private JIntTreeAsignaturas jIntTreeAsignaturas;
    private JIntTreeAulas jIntTreeAulas;
    private JIntAsignaciones jIntAsignaciones;
    private JIntRestricciones jIntRestricciones;
    private JIntGenetic jIntgenGenetic;
    private JIntHorarioPorAulas jIntHorarioView;
    ArrayList<JInternalFrame> listaTabs;
    private File lastFileUsed=new File("archivos/aa");

    /**
     * Creates new form MainWindow
     * @throws Exception 
     */
    public MainWindowDesktopPane() throws Exception {
        initComponents();
        dirty = false;
        //dataProfesores = new DataProfesores();
        AsigTester asig = new AsigTester();
        listaTabs = new ArrayList<JInternalFrame>();
        dk = new DataKairos();

        //asig.datosRelleno(dataProfesores, dataAsignaturas, dataAulas);
        //    asig.datosRelleno(dk.getDP());
        //dk.getDP().setMainWindow(this);

        //Parámetros básicos de la ventana
        this.setTitle("Kairos");

        //Añado los paneles que necesito
        jIntWelcome = new JIntWelcome(dk);
        addTab("Bienvenida", jIntWelcome);

        JIntDatosProyecto jIntDatosProyecto = new JIntDatosProyecto(dk);
        addTab("Datos del proyecto", jIntDatosProyecto);

        jIntTreeProfesores = new JIntTreeProfesores(dk);
        addTab("Profesores", jIntTreeProfesores);

        jIntTreeAsignaturas = new JIntTreeAsignaturas(dk);
        addTab("Asignaturas", jIntTreeAsignaturas);

        jIntTreeAulas = new JIntTreeAulas(dk);
        addTab("Aulas", jIntTreeAulas);


        jIntAsignaciones = new JIntAsignaciones(dk);
        addTab("Docencia", jIntAsignaciones);
        //dataProfesores.dataToDOM();

        jIntRestricciones = new JIntRestricciones(dk);
        addTab("Restricciones", jIntRestricciones);

        jIntgenGenetic = new JIntGenetic(dk);
        addTab("Optimizacion", jIntgenGenetic);

        jIntHorarioView = new JIntHorarioPorAulas(dk);
        addTab("Horario", jIntHorarioView);

        //Registro los listeners de cada ventana a otra
        registraListeners();



//        jIntWelcome.loadProyecto(new File("./archivos/aa"));

      

    }

    /**
     *
     * @return
     */
    public JDesktopPane getjTabPrincipal() {
        return jDesktopPane;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jDesktopPane = new JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentMenuItem.setMnemonic('c');
        contentMenuItem.setText("Contents");
        helpMenu.add(contentMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 949, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                             
        System.exit(0);
    }                                            

    private boolean checkDirty() {
        //Devuelve true si:
        //o bien isDirty() da negativo, es decir, no hay datos sin guardar.
        //o bien isDirty() da positivo Y se elige "SI" en el diálogo de confirmación
        //Se usa el operador "||" en vez de "|" para que el diálogo se evalúe 
        //solo si isDirty() es positivo.
//        return ((!dk.getDP().isDirty()) || (JOptionPane.showConfirmDialog(
//                this,
//                "Hay datos no guardados ¿Continuar de todos modos?",
//                "Aviso",
//                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION));
        return false;
    }
    // Variables declaration - do not modify                     
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private JDesktopPane jDesktopPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration                   

    /**
     *
     * @return
     */
    public JIntWelcome getjIntWelcome() {
        return jIntWelcome;
    }

    /**
     *
     * @param jIntWelcome
     */
    public void setjIntWelcome(JIntWelcome jIntWelcome) {
        this.jIntWelcome = jIntWelcome;
    }

    /**
     *
     * @return
     */
    public JIntTreeProfesores getjIntTreeProfesores() {
        return jIntTreeProfesores;
    }

    /**
     *
     * @param jIntTreeProfesores
     */
    public void setjIntTreeProfesores(JIntTreeProfesores jIntTreeProfesores) {
        this.jIntTreeProfesores = jIntTreeProfesores;
    }

    /**
     *
     * @return
     */
    public JIntTreeAsignaturas getjIntTreeAsignaturas() {
        return jIntTreeAsignaturas;
    }

    /**
     *
     * @param jIntTreeAsignaturas
     */
    public void setjIntTreeAsignaturas(JIntTreeAsignaturas jIntTreeAsignaturas) {
        this.jIntTreeAsignaturas = jIntTreeAsignaturas;
    }

    /**
     *
     * @return
     */
    public JIntTreeAulas getjIntTreeAulas() {
        return jIntTreeAulas;
    }


    /**
     *
     * @return
     */
    public JIntAsignaciones getjIntAsignaciones() {
        return jIntAsignaciones;
    }

    /**
     *
     * @return
     */
    public JIntRestricciones getjIntRestricciones() {
        return jIntRestricciones;
    }

    /**
     *
     * @return
     */
    public JIntHorarioPorAulas getjIntHorarioView() {
        return jIntHorarioView;
    }


    /**
     *
     */
    public void refrescaVentanaHorarios() {
        jIntHorarioView.needRecalcularPesos();
    }

    /**
     *
     */
    public void expandAllTrees() {
        expandTree(jIntTreeProfesores.getjTreeProfesores());
        expandTree(jIntTreeAsignaturas.getjTreeAsignaturas());
        expandTree(jIntTreeAulas.getjTreeAulas());
    }

    /**
     *
     * @param jtree
     */
    public void expandTree(JTree jtree) {
        for (int i = 0; i < jtree.getRowCount(); i++) {
            jtree.expandRow(i);
        }
    }

    /**
     *
     */
    public void registraListeners() {
        dk.getDP().getDataRestricciones().addListener(jIntHorarioView);
        dk.getDP().getDataRestricciones().addListener(jIntRestricciones);

        dk.getDP().getDataProfesores().addListener(jIntTreeProfesores);

        dk.getDP().getDataAulas().addListener(jIntTreeAulas);
        dk.getDP().getDataAsignaturas().addListener(jIntTreeAsignaturas);
    }

    /**
     *
     */
    public void borraListeners() {
        dk.getDP().getDataRestricciones().clearListeners();
        dk.getDP().getDataRestricciones().clearListeners();
        dk.getDP().getDataAsignaturas().clearListeners();

        dk.getDP().getDataProfesores().clearListeners();

        dk.getDP().getDataAulas().clearListeners();
    }

    /**
     *
     * @return
     */
    public File getLastFileUsed() {
        return lastFileUsed;
    }

    private void addTab(String title, JInternalFrame tab) {
        jDesktopPane.add(tab);
        tab.setVisible(true);
        tab.setTitle(title);
        DataGUIInterface d = (DataGUIInterface) tab;
//        d.setMainWindow(this);
        listaTabs.add(tab);
        
    }

    /**
     *
     */
    public void refreshAllTabs() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}
