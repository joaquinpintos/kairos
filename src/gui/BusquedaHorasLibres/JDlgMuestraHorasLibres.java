/*
 * Copyright (C) 2014 David Gutiérrez Rubio <davidgutierrezrubio@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package gui.BusquedaHorasLibres;

import data.DataKairos;
import data.Hora;
import data.MyConstants;
import data.RangoHoras;
import data.horarios.HorarioItem;
import data.profesores.Profesor;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;

/**
 *
 * @author David Gutiérrez Rubio <davidgutierrezrubio@gmail.com>
 */
public class JDlgMuestraHorasLibres extends javax.swing.JDialog {

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;
    private final ArrayList<Profesor> profesores;
    protected final DataKairos dk;
    private final int duracionMinima;

    /**
     * Creates new form JDlgMuestraHorasLibres
     */
    public JDlgMuestraHorasLibres(java.awt.Frame parent, boolean modal, DataKairos dk, ArrayList<Profesor> data, int duracionMinima) {
        super(parent, modal);
        initComponents();
        this.profesores = data;
        this.dk = dk;
        this.duracionMinima = duracionMinima;
        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
        calculateFreeHours();

    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextResultados = new javax.swing.JTextArea();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("Cerrar");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jTextResultados.setColumns(20);
        jTextResultados.setRows(5);
        jScrollPane1.setViewportView(jTextResultados);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton)
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextResultados;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;

    private void calculateFreeHours() {
        //Calcula las horas libres comunes a todos los profesores.
        HashMap<Integer, ArrayList<RangoHoras>> horasDisponibles = new HashMap<Integer, ArrayList<RangoHoras>>();//diaSemana->Array rangos horas
        Hora hora1 = dk.getDP().getAcademicCalendar().getMañana1().getInicio();
        Hora hora2 = dk.getDP().getAcademicCalendar().getTarde2().getFin();
        RangoHoras rh = new RangoHoras(hora1, hora2);
        //Con esto relleno un montón de rangos horarios en principio disponibles. Ahora es cuestión de irlos borrando
        try {
            for (int dia = 1; dia <= 5; dia++) {
                horasDisponibles.put(dia, rh.splitRangos(dk.getDP().getMinutosPorCasilla()));
            }
        } catch (Exception ex) {
            Logger.getLogger(JDlgMuestraHorasLibres.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Recorro todos los horarioItems para ver dónde están mis profesores ocupados
        for (HorarioItem h : dk.getDP().getHorario().getHorarios()) {
            if (profesores.contains(h.getProfesor()))//Si el item es de un profesor de la lista
            {
                int dia = h.getDiaSemana();
                try {
                    ArrayList<RangoHoras> rhOcupados = h.getRangoHoras().splitRangos(dk.getDP().getMinutosPorCasilla());
                    horasDisponibles.get(dia).removeAll(rhOcupados);

                } catch (Exception ex) {
                    Logger.getLogger(JDlgMuestraHorasLibres.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        //Ahora "comprimo" los rangos juntando los consecutivos
        for (int dia = 1; dia <= 5; dia++) {
            ArrayList<RangoHoras> ran = horasDisponibles.get(dia);

            boolean terminado = false;

            while (!terminado) {
                terminado = true;
                for (int n = 0; n < ran.size() - 1; n++) {
                    RangoHoras r1 = ran.get(n);
                    RangoHoras r2 = ran.get(n + 1);
                    if (r1.getFin().equals(r2.getInicio())) {
                        r1.setFin(r2.getFin());
                        ran.remove(r2);
                        terminado = false;
                        break;
                    }
                }
            }
            if (duracionMinima > 0) {
                for (Iterator<RangoHoras> it = ran.iterator(); it.hasNext();) {
                    RangoHoras r = it.next();
                    if (r.getDuracionMinutos() < duracionMinima) {
                        it.remove();
                    }
                }
            }
        }

//        System.out.println("Lunes:");
//        for (RangoHoras r:horasDisponibles.get(1)) System.out.println(r);
//        System.out.println("Martes:");
//        for (RangoHoras r:horasDisponibles.get(2)) System.out.println(r);
//        System.out.println("Miércoles:");
//        for (RangoHoras r:horasDisponibles.get(3)) System.out.println(r);
//        System.out.println("Jueves:");
//        for (RangoHoras r:horasDisponibles.get(4)) System.out.println(r);
//        System.out.println("Viernes:");
//        for (RangoHoras r:horasDisponibles.get(5)) System.out.println(r);
//        
        StringBuilder texto = new StringBuilder();
        texto.append("Horas sin docencia para los profesores:\n");
        texto.append("======================================:\n");
        for (Profesor p : profesores) {
            texto.append(p.toString()).append("\n");
        }
        texto.append("-----------------------------");
        for (int dia = 1; dia <= 5; dia++) {
            texto.append("\n\n").append(MyConstants.DIAS_SEMANA[dia - 1]).append(":\n");
            for (RangoHoras r : horasDisponibles.get(dia)) {
                texto.append(r.toString()).append("\n");
            }
        }
        jTextResultados.setText(texto.toString());
    }
}
